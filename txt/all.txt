╒═══════════════════════════════════════════════════════════════════════════════════════╕
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░▐█░░░░░░█▌░░░░███░░░░░░░▐█░░░░░░███░░░███░░░███████▌░░░░░▐█████▌░░░░█▌░░░░███░░░│
│░░░░░░█▌░█▌░░░░███░░░███░░░░░░█▌░█▌░░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░│
│░░░░▐█░░░███░░░████▌░███░░░░▐█░░░███░░░███░░░█▌░░░░███░░░███░░░███░░░███░░░████▌░███░░░│
│░░░█████████░░░███░▐████░░░█████████░░░███░▐█░░░░░░███░▐██▌░░░░███░░░███░░░███░▐████░░░│
│░░░███░░░███░░░███░░░███░░░███░░░███░░░████▌░█▌░░░░███░░░███░░░███░░░███░░░███░░░███░░░│
│░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░│
│░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░███░░░░▐█████▌░░░░███░░░███░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░╒══════════════════════════════╕░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░│  ABCDEFGHIJKLMNOPQRSTUVWXYZ  │░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░│  abcdefghijklmnopqrstuvwxyz  │░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░│        12345 & 67890         │░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░├──────────────────────────────┤░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░│      .,;:=~-*#%@`^'"$!?      │░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░│         <{([\|/])}>          │░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░╘══════════════════════════════╛░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
╘═══════════════════════════════════════════════════════════════════════════════════════╛
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                  GENERAL PROGRAMMING                                  │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                      o0O s5S 9gq z2Z !|l1Iij {([|])} .,;: ``''""                      │
│                      a@#* vVuUwW <>;^°=-~ öÖüÜäÄßµ // -- == __                        │
│                      the quick brown fox jumps over the lazy dog                      │
│                      THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG                      │
│                      0123456789 &-+@ for (int i=0; i<=j; ++i) {}                      │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                        ENGLISH                                        │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│    Grumpy wizards make toxic brew for the evil Queen and Jack. One morning, when      │
│    Gregor Samsa woke from troubled dreams, he found himself transformed in his bed    │
│    into a horrible vermin. He lay on his armour-like back, and if he lifted his       │
│    head a little he could see his brown belly, slightly domed and divided by          │
│    arches into stiff sections. The bedding was hardly able to cover it and seemed     │
│    ready to slide off any moment. His many legs, pitifully thin compared with the     │
│    size of the rest of him, waved about helplessly as he looked.                      │
│                                                                                       │
│    GRUMPY WIZARDS MAKE TOXIC BREW FOR THE EVIL QUEEN AND JACK. ONE MORNING, WHEN      │
│    GREGOR SAMSA WOKE FROM TROUBLED DREAMS, HE FOUND HIMSELF TRANSFORMED IN HIS BED    │
│    INTO A HORRIBLE VERMIN. HE LAY ON HIS ARMOUR-LIKE BACK, AND IF HE LIFTED HIS       │
│    HEAD A LITTLE HE COULD SEE HIS BROWN BELLY, SLIGHTLY DOMED AND DIVIDED BY          │
│    ARCHES INTO STIFF SECTIONS. THE BEDDING WAS HARDLY ABLE TO COVER IT AND SEEMED     │
│    READY TO SLIDE OFF ANY MOMENT. HIS MANY LEGS, PITIFULLY THIN COMPARED WITH THE     │
│    SIZE OF THE REST OF HIM, WAVED ABOUT HELPLESSLY AS HE LOOKED.                      │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                         CZECH                                         │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                         Příliš žluťoučký kůň úpěl ďábelské ó.                         │
│                         PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ Ó.                         │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                       ICELANDIC                                       │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                 Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.                  │
│                 KÆMI NÝ ÖXI HÉR, YKIST ÞJÓFUM NÚ BÆÐI VÍL OG ÁDREPA.                  │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                        POLISH                                         │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                       Jeżu klątw, spłódź Finom część gry hańb!                        │
│                       JEŻU KLĄTW, SPŁÓDŹ FINOM CZĘŚĆ GRY HAŃB!                        │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                       ROMANIAN                                        │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                  Muzicologă în bej vând whisky și tequila, preț fix.                  │
│                  MUZICOLOGĂ ÎN BEJ VÂND WHISKY ȘI TEQUILA, PREȚ FIX.                  │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                        TURKISH                                        │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                     Fahiş bluz güvencesi yağdırma projesi çöktü.                      │
│                     FAHIŞ BLUZ GÜVENCESI YAĞDIRMA PROJESI ÇÖKTÜ.                      │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                       CYRILLIC                                        │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│               Съешь ещё этих мягких французских булок, да выпей же чаю.               │
│               СЪЕШЬ ЕЩЁ ЭТИХ МЯГКИХ ФРАНЦУЗСКИХ БУЛОК, ДА ВЫПЕЙ ЖЕ ЧАЮ.               │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                         GREEK                                         │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│               διαφυλάξτε γενικά τη ζωή σας από βαθειά ψυχικά τραύματα.                │
│               ΔΙΑΦΥΛΑΞΤΕ ΓΕΝΙΚΑ ΤΗ ΖΩΗ ΣΑΣ ΑΠΟ ΒΑΘΕΙΑ ΨΥΧΙΚΑ ΤΡΑΥΜΑΤΑ.                │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                       C64 BASIC                                       │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│       100 PRINT CHR$(147); CHR$(18); "****       SIERPINSKI CARPET        ****"       │
│       110 PRINT                                                                       │
│       120 INPUT "ORDER"; O$                                                           │
│       130 O = VAL(O$)                                                                 │
│       140 IF O < 1 THEN 120                                                           │
│       150 PRINT                                                                       │
│       160 SZ = 3 ↑ O                                                                  │
│       170 FOR Y = 0 TO SZ - 1                                                         │
│       180 :FOR X = 0 TO SZ - 1                                                        │
│       190 : CH$ = "#"                                                                 │
│       200 : X1 = X                                                                    │
│       210 : Y1 = Y                                                                    │
│       220 : IF (X1 = 0) OR (Y1 = 0) THEN 290                                          │
│       230 :  X3 = X1 - 3 * INT(X1 / 3)                                                │
│       240 :  Y3 = Y1 - 3 * INT(Y1 / 3)                                                │
│       250 :  IF (X3 = 1) AND (Y3 = 1) THEN CH$ = " ": GOTO 290                        │
│       260 :  X1 = INT(X1 / 3)                                                         │
│       270 :  Y1 = INT(Y1 / 3)                                                         │
│       280 : GOTO 220                                                                  │
│       290 : PRINT CH$;                                                                │
│       300 :NEXT X                                                                     │
│       310 PRINT                                                                       │
│       320 NEXT Y                                                                      │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                        FORTRAN                                        │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│      1 │ program mandel                                                               │
│      2 │     implicit none                                                            │
│      3 │     integer, parameter :: N = 99  ! smaller than half of terminal width      │
│      4 │     character(3) :: N_str                                                    │
│      5 │     complex :: c(N,N)  ! coordinates                                         │
│      6 │     complex :: z(N,N)  ! values for iteration                                │
│      7 │     integer :: i, j                                                          │
│      8 │     c = 0.0                                                                  │
│      9 │     z = 0.0                                                                  │
│      9 │     do i = 1, N                                                              │
│     10 │         c(:, i) = c(:, i) + [(cmplx(3.*j/(N-1)-2, 0.),j=0,N-1)]              │
│     11 │         c(i, :) = c(i, :) + [(cmplx(0., 3.*j/(N-1)-1.5),j=0,N-1)]            │
│     12 │     end do                                                                   │
│     13 │     do i = 1, 100                                                            │
│     14 │         z = z**2 + c                                                         │
│     15 │     end do                                                                   │
│     16 │     write(N_str, "(i3)") N                                                   │
│     17 │     print "("//trim(N_str)//"(a))", merge('##', '  ', abs(z)<2)              │
│     17 │ end program mandel                                                           │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                        PASCAL                                         │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│                1 │ function GenBracketExpr(n: integer): string;                       │
│                2 │ begin                                                              │
│                3 │   var a := Arr('[',']')*n;                                         │
│                4 │   Shuffle(a);                                                      │
│                5 │   Result := a.JoinToString                                         │
│                6 │ end;                                                               │
│                7 │                                                                    │
│                8 │ function IsBalanced(s: string): boolean;                           │
│                9 │ begin                                                              │
│               10 │   Result := True;                                                  │
│               11 │   var st := new Stack<char>;                                       │
│               12 │   foreach var c in s do                                            │
│               13 │     if c = '[' then                                                │
│               14 │       st.Push(c)                                                   │
│               15 │     else if (st.Count > 0) and (st.Peek = '[') then                │
│               16 │       st.Pop                                                       │
│               17 │     else begin                                                     │
│               18 │       Result := False;                                             │
│               19 │       exit                                                         │
│               20 │     end;                                                           │
│               21 │ end;                                                               │
│               22 │                                                                    │
│               23 │ begin                                                              │
│               24 │   loop 10 do                                                       │
│               25 │   begin                                                            │
│               26 │     var s := GenBracketExpr(Random(2,5));                          │
│               27 │     Println(s, IsBalanced(s));                                     │
│               28 │   end;                                                             │
│               29 │ end.                                                               │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                           C                                           │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│       1 │ #include <stdio.h>                                                          │
│       2 │ #include <stdlib.h>                                                         │
│       3 │ #include <resolv.h>                                                         │
│       4 │ #include <fcntl.h>                                                          │
│       5 │ #include <unistd.h>                                                         │
│       6 │ #include <sys/types.h>                                                      │
│       7 │ #include <sys/stat.h>                                                       │
│       8 │ #include <sys/mman.h>                                                       │
│       9 │                                                                             │
│      10 │ int main() {                                                                │
│      11 │   int fin = open("favicon.ico",  O_RDONLY);                                 │
│      12 │   if (fin == -1)                                                            │
│      13 │     return 1;                                                               │
│      14 │                                                                             │
│      15 │   struct stat st;                                                           │
│      16 │   if (fstat(fin, &st))                                                      │
│      17 │     return 1;                                                               │
│      18 │                                                                             │
│      19 │   void *bi = mmap(0, st.st_size, PROT_READ, MAP_PRIVATE, fin, 0);           │
│      20 │   if (bi == MAP_FAILED)                                                     │
│      21 │     return 1;                                                               │
│      22 │                                                                             │
│      23 │   int outLength = ((st.st_size + 2) / 3) * 4 + 1;                           │
│      24 │   char *outBuffer = malloc(outLength);                                      │
│      25 │   if (outBuffer == NULL)                                                    │
│      26 │     return 1;                                                               │
│      27 │                                                                             │
│      28 │   int encodedLength = b64_ntop(bi, st.st_size, outBuffer, outLength);       │
│      29 │   if (encodedLength < 0)                                                    │
│      30 │     return 1;                                                               │
│      31 │                                                                             │
│      32 │   puts(outBuffer);                                                          │
│      33 │                                                                             │
│      34 │   free(outBuffer);                                                          │
│      35 │   munmap(bi, st.st_size);                                                   │
│      36 │   close(fin);                                                               │
│      37 │                                                                             │
│      38 │   return 0;                                                                 │
│      39 │ }                                                                           │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                          APL                                          │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│        1 │ w←⊃(⊃0⍴⍵){                           ⍝┌┌─2─┐       monadic; use ↓          │
│        2 │     (e a)←|⍺                         ⍝├ 0 0 1 1 1  dyadic; use /           │
│        3 │     T←⌽⍣(0>⊃⌽⍺)                      ⍝└──→⍺⍺←─────┐                        │
│        4 │     Pad←⍵⍵⍉(T⊣)⍪⍵⍪(T⊢)               ⍝ ┌⍺┐  ⌺     │                        │
│        5 │     need←(1+e),1↓⍴⍵                  ⍝ ┌─────⍵⍵──┐┘                        │
│        6 │     a=0:(1↓need⍴0↑⍵)Pad(1↓need⍴0↑⊢⍵) ⍝  0 0│1 2 3 4 5│0 0  Zero            │
│        7 │     a=1:(1↓need⍴1↑⍵)Pad(1↓need⍴1↑⊖⍵) ⍝  1 1│1 2 3 4 5│5 5  Replicate       │
│        8 │     a=2:(⊖¯1↓need⍴⊢⍵)Pad(¯1↓need⍴⊖⍵) ⍝  2 1│1 2 3 4 5│5 4  Reverse         │
│        9 │     a=3:(⊖⊢1↓need⍴⊢⍵)Pad(⊢1↓need⍴⊖⍵) ⍝  3 2│1 2 3 4 5│4 3  Mirror          │
│       10 │     a=4:(⊖¯1↓need⍴⊖⍵)Pad(¯1↓need⍴⊢⍵) ⍝  4 5│1 2 3 4 5│1 2  Wrap            │
│       11 │ }(¯1⌽⍳≢⍴⍵)/(⌽extra,¨⍺⊣0),⊂⍵          ⍝     └────⍵────┘                     │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘
┌───────────────────────────────────────────────────────────────────────────────────────┐
│                                     BOX DRAWINGS                                      │
├───────────────────────────────────────────────────────────────────────────────────────┤
│                                                                                       │
│       ┌┬┐ ╓╥╖  ┌┬┐ ┎┰┒  ┌╷┐  ╃╀╄  ╆╈╅  │╎┆┊ ┃╏┇┋  █                 ▄████▄            │
│       ├┼┤─╟╫╢  ├┼┤─┠╂┨  ╶┼╴  ┽┼┾  ╊╋╉  │╎┆┊ ┃╏┇┋  ▉  ╱╲╱╲╳╳╳       ▐▌    ▐▌           │
│       └┴┘ ╙╨╜  └┴┘ ┖┸┚  └╵┘  ╅╁╆  ╄╇╃  │╎┆┊ ┃╏┇┋  ▊  ╲╱╲╱╳╳╳    ▄▀▀█▀    ▐▌           │
│        │   ║    │   ┃                             ▋  ╱╲╱╲╳╳╳    ▄ ▐▄     ▐▌▀▀▄        │
│       ╒╤╕ ╔╦╗  ┍┯┑ ┏┳┓  ┏╻┓ ╭╽╮  ┟┲┱┧  ──── ━━━━  ▌  ╲╱╲╱╳╳╳  ▐▀ ▄▄ ▀▌ ▄▀▀ ▀▄ ▀       │
│       ╞╪╡═╠╬╣  ┝┿┥━┣╋┫  ╺╋╸ ╼╋╾  ┞┺┹┦  ╌╌╌╌ ╍╍╍╍  ▍           ▐ ▀██▀ ▌▐ ▄██▄ ▌        │
│       ╘╧╛ ╚╩╝  ┕┷┙ ┗┻┛  ┗╹┛ ╰╿╯  ┢┭┮┪  ┄┄┄┄ ┅┅┅┅  ▎ ▁▂▃▄▅▆▇█   ▀▄ ▄▄▀ ▐  ▀▀  ▌        │
│       ╔═╦═╗  ┌─┬─┐  ╭─┬─╮  ╭─┬─╮ ┡┵┶┩  ┉┉┉┉ ┉┉┉┉  ▏               █    ▀▄▄ ▄▀         │
│       ║┌╨┐║  │╔╧╗│  │╒╪╕│  │╓╁╖│                    ░░▒▒▓▓██      █ █    █ ▐          │
│       ╠╡╳╞╣  ├╢╳╟┤  ├┼┼┼┤  ├╫╂╫┤  ▞▚  ▗▄▖  ▛▀▜  ╭╮  ░░▒▒▓▓██      █ █   ▐▌ █          │
│       ║└╥┘║  │╚╤╝│  │╘╪╛│  │╙╀╜│  ▚▞  ▐ ▌  ▌█▐  ╰╯                █ █   ▐▌ █          │
│       ╚═╩═╝  └─┴─┘  ╰─┴─╯  ╰─┴─╯      ▝▀▘  ▙▄▟  ╭╮  ╭╮            ▐▌▐▌   █ █          │
│       ┌─┬┐  ┌─┬┒  ┌─┲┓  ╓─╥╖  ╒═╤╕  ╔═╦╗        ╰┼──┼╯            ▐▌ █▄ ▐▌ █          │
│       │ ││  │ │┃  │ ┃┃  ║ ║║  │ ││  ║ ║║  ╲│╱    │  │              █  ▀▀▀  ▐▌         │
│       ├─┼┤  ├─╆┫  ┢━╋┫  ╟─╫╢  ╞═╪╡  ╠═╬╣  ─╳─   ╭┼──┼╮             ▐▌      █          │
│       └─┴┘  ┕━┻┛  ┗━┻┛  ╙─╨╜  ╘═╧╛  ╚═╩╝  ╱│╲   ╰╯  ╰╯              █▄    ▄█          │
│       ┌─┬─────────┬─────────┐                                        ▀████▀           │
│       │ └─┐ ┌───┐ ├───┬───┐ │  ┌───────────────────┐   ┌┮┭┬┬┲┱┬┬┬┐                    │
│       ├─┐ │ └─┐ │ │ ╷ ╵ ╷ ╵ │  │  ╔═══╗ Some Text  │▒  ┟┼┼┼┼╄╃┼┼┼┧                    │
│       │ │ │ ╷ │ ╵ │ └───┴─┐ │  │  ╚═╦═╝ in the box │▒  ┞┼┼┼┼┼┼┼┼┼┦                    │
│       │ │ └─┤ │ ╶─┴─────╴ │ │  ╞═╤══╩══╤═══════════╡▒  ┢╅┼┼┼┼┼┼┼╆┪                    │
│       │ └─╴ │ │ ┌─────┬───┤ │  │ ├──┬──┤           │▒  ┡╃┼┼┼┼┼┼┼╄┩                    │
│       │ ╶─┬─┤ └─┘ ╶─┐ │ ┌─┘ │  │ └──┴──┘           │▒  ├┼╆╈╅┼┼╁┼┼┤                    │
│       ├─┐ │ ╵ ┌─────┤ │ ╵ ╶─┤  └───────────────────┘▒  ├┼╊╋╉┼┾╋┽┼┤                    │
│       │ │ └─┐ │ ┌─╴ │ └─┬─┐ │   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  ├┼╄╇╃┼┼╀┼┼┤                    │
│       │ └─┐ └─┘ │ ╶─┴─┐ │ ╵ │                          ├┼┼┼┼╆╅┼┼┼┤                    │
│       │ ╶─┴─────┴───╴ ╵ │ ╶─┤                          └┶┵┴┴┺┹┴┴┴┘                    │
│       └─────────────────┴───┘                                                         │
│                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────┘